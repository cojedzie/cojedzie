# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  locale: 'pl'

  env(FEDERATION_HUB): 'https://cojedzie.pl'
  env(FEDERATION_CONNECTION_ID): null
  env(FEDERATION_SERVER_ID): null
  env(FEDERATION_URL): null

  env(CORS_ALLOW_ORIGIN): '^https?://.*'

  env(MERCURE_JWT_SECRET): ''
  env(MERCURE_URL): ''
  env(MERCURE_PUBLIC_URL): ''

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false       # Allows optimizing the container by removing unused services; this also means

  _instanceof:
    App\Provider\Provider:
      tags: [ app.provider ]

    App\DataImport\DataImporter:
      tags: [ app.data_importer ]

    App\DataConverter\Converter:
      tags: [ app.converter ]

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{DependencyInjection,Exception,Modifier,Entity,Message,Dto,Migrations,Tests,Parser,Functions,Filter,Utility,Kernel.php}'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Provider\:
    resource: '../src/Provider'
    public: true

  App\Filter\Handler\:
    resource: '../src/Filter/Handler'
    tags: [ app.handler ]

  #eerialziser
  jms_serializer.serialized_name_annotation_strategy:
    class: JMS\Serializer\Naming\SerializedNameAnnotationStrategy
    arguments:
      - '@jms_serializer.identical_property_naming_strategy'

  App\Serialization\CarbonHandler:
    arguments: [ '@jms_serializer.datetime_handler' ]

  #proxy configuration
  proxy.locator:
    class: 'App\Service\Proxy\FileLocator'
    arguments: [ '%kernel.cache_dir%/proxy' ]

  proxy.strategy:
    class: 'ProxyManager\GeneratorStrategy\FileWriterGeneratorStrategy'
    arguments: [ '@proxy.locator' ]

  proxy.config:
    class: 'ProxyManager\Configuration'
    calls:
      - [ 'setGeneratorStrategy', [ '@proxy.strategy' ] ]
      - [ 'setProxiesTargetDir', [ '%kernel.cache_dir%/proxy' ] ]

  ProxyManager\Configuration: '@proxy.config'

  # converter
  App\DataConverter\AggregateConverter:
    arguments:
      - !tagged_iterator app.converter

  App\DataConverter\Converter: '@App\DataConverter\AggregateConverter'

  # serializer configuration
  App\Service\SerializerContextFactory:
    arguments:
      $factory: '@jms_serializer.metadata_factory'

  # other servces
  App\Service\ProviderResolver:
    arguments: [ !tagged app.provider, '%kernel.debug%' ]

  App\Service\HandlerProvider:
    arguments: [ !tagged_locator app.handler ]
    shared: false

  App\Service\HandlerProviderFactory:
    arguments: [ !tagged_locator app.handler ]

  App\Service\DataUpdater:
    arguments:
      $importers: !tagged_iterator app.data_importer

  App\Service\ProviderDataImporter:
    arguments:
      $providers: !tagged_iterator app.provider

  app.import.logger: '@monolog.logger.import'

  app.import.progress_reporter_factory:
    class: App\DataImport\ProgressReporterFactory
    arguments:
      $logger: '@app.import.logger'

  App\DataImport\ProgressReporterFactory: '@app.import.progress_reporter_factory'

  App\Service\RequirementsArgumentResolver:
    decorates: 'argument_resolver'

  App\Serialization\Serializer:
    decorates: serializer
    arguments:
      $decorated: '@App\Serialization\Serializer.inner'

  App\Serialization\Normalizer\DtoNormalizer:
    decorates: serializer.normalizer.object
    arguments:
      $decorated: '@App\Serialization\Normalizer\DtoNormalizer.inner'

  App\Serialization\MetadataLoader:
    decorates: 'serializer.mapping.chain_loader'

  # Context Providers
  App\Context\FederationContext:
    arguments:
      $serverId: '%env(FEDERATION_SERVER_ID)%'
      $connectionId: '%env(FEDERATION_CONNECTION_ID)%'
      $hubBaseUrl: '%env(FEDERATION_HUB)%'
      $advertisedUrl: '%env(FEDERATION_URL)%'
